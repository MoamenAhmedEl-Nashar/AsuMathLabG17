class mDynArr
{
    int arraySize;
    int usedSlots;
public:
    matrix *p;

    mDynArr()
    {
        p=new matrix[1];
        usedSlots=0;
    }
    mDynArr(int s)
    {
        arraySize=s;
        if(arraySize<=0)
            arraySize=1;
        p=new matrix[arraySize];
        usedSlots=0;
    }
    int getArraysize()
    {
        return arraySize;
    }
    int getUsedSlots()
    {
        return usedSlots;
    }
	matrix operator [] (int i)
	{
		return p[i];
	}
    void create(string name)
    {
        p[usedSlots].setName(name);
        refresh();
    }
    void create(string name,string mString)
    {
        p[usedSlots].initialling(name,mString);
        refresh();
    }
    void update(int num,string name,string mString)
    {
        p[num].update(name,mString);
    }
    void refresh()
    {
        usedSlots++;
        if(usedSlots==arraySize)
        {

            arraySize+=10;
            matrix *t=new matrix [arraySize];
            for(int i=0;i<usedSlots;i++)
            {
                t[i].setRows(p[i].getRows());
                t[i].setColumns(p[i].getColumns());
                t[i].setName(p[i].getName());

                t[i].element=new double*[t[i].getRows()];
                for(int o=0;o<p[i].getRows();o++)
                {
                   t[i].element[o]=new double[t[i].getColumns()];

                }
                for(int k=0;k<p[i].getRows();k++)
                {
                    for(int j=0;j<p[i].getColumns();j++)
                    {

                        t[i].element[k][j]=p[i].element[k][j];
                    }
                }
                 for(int g=0;g<p[i].getRows();g++)
                 {
                     delete[] p[i].element[g];
                 }
		          delete[] p[i].element;



            }

		    p=t;
        }
    }

};
